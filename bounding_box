import cv2
import os
from PIL import Image
import numpy as np

def box_label(image, box, label='', color=(128, 128, 128), txt_color=(255, 255, 255)):
    """
    Draw a bounding box with a label on the image.

    Parameters:
    - image: numpy.ndarray, the image on which to draw the bounding box.
    - box: list, a list containing the coordinates of the bounding box (x_min, y_min, x_max, y_max).
    - label: str, the label to be displayed on the box.
    - color: tuple, the color of the bounding box.
    - txt_color: tuple, the color of the label text.

    Returns:
    - image: numpy.ndarray, the image with the drawn bounding box.
    """
    lw = max(round(sum(image.shape) / 2 * 0.003), 2)
    p1, p2 = (int(box[0]), int(box[1])), (int(box[2]), int(box[3]))
    cv2.rectangle(image, p1, p2, color, thickness=lw, lineType=cv2.LINE_AA)
    
    if label:
        tf = max(lw - 1, 1)  # font thickness
        w, h = cv2.getTextSize(label, 0, fontScale=lw / 3, thickness=tf)[0]  # text width, height
        outside = p1[1] - h >= 3
        p2 = p1[0] + w, p1[1] - h - 3 if outside else p1[1] + h + 3
        cv2.rectangle(image, p1, p2, color, -1, cv2.LINE_AA)  # filled
        cv2.putText(image,
                    label, (p1[0], p1[1] - 2 if outside else p1[1] + h + 2),
                    0,
                    lw / 3,
                    txt_color,
                    thickness=tf,
                    lineType=cv2.LINE_AA)

def plot_bboxes2(img_name, output_folder, image, boxes, labels=[], colors=[], score=True, conf=None, save=True):
    """
    Plot bounding boxes on an image.

    Parameters:
    - img_name: str, the name of the image.
    - output_folder: str, the folder where the output image will be saved.
    - image: numpy.ndarray, the input image.
    - boxes: list, a list of bounding boxes.
    - labels: list, a list of labels corresponding to each bounding box.
    - colors: list, a list of colors for each bounding box.
    - score: bool, whether to include the score in the label.
    - conf: float, confidence threshold for filtering bounding boxes.
    - save: bool, whether to save the output image.

    Returns:
    - image: numpy.ndarray, the image with drawn bounding boxes.
    - label: str, the label of the last drawn bounding box.
    """
    # Define COCO Labels
    label = None
    if labels == []:
        labels = {0: u'none', 1: u' B.C.', 2: u'C.Y.', 3: u'Z.H.'}
    # Define colors
    if colors == []:
        colors = [(89, 161, 197), (67, 161, 255), (19, 222, 24)]

    # Plot each box
    for box in boxes:
        # Add score in label if score=True
        if score:
            label = labels[int(box[-1]) + 1] + " " + str(round(100 * float(box[-2]), 1)) + "%"
        else:
            label = labels[int(box[-1]) + 1]
        # Filter every box under conf threshold if conf threshold setted
        if conf:
            if box[-2] > conf:
                color = colors[int(box[-1])]
                box_label(image, box, label, color)
        else:
            color = colors[int(box[-1])]
            box_label(image, box, label, color)

    # Show image
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    if save:
        cv2.imwrite(os.path.join(output_folder, img_name), image)
    return image, label
